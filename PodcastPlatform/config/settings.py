"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import sys
import os
from dotenv import load_dotenv
from celery.schedules import crontab

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('PROJECT_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

THIRD_PARTY_APPS = [
    'debug_toolbar',
    'rest_framework',
    'corsheaders',
    'django_elasticsearch_dsl',
    'django_elasticsearch_dsl_drf',
]

LOCAL_APPS = [
    'accounts',
    'core',
    'podcast',
    'parser',
    'actions',
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

INSTALLED_APPS += THIRD_PARTY_APPS
INSTALLED_APPS += LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    "debug_toolbar.middleware.DebugToolbarMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    'core.middleware.RequestLoggerMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'db',
        'PORT': 5432
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://redis:6379/0',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}


if "test" in sys.argv:
    for db_test in ["default"]:  # Add other DBs if needed
        DATABASES[db_test]["ENGINE"] = "django.db.backends.sqlite3"
        if "--keepdb" in sys.argv:
            DATABASES[db_test]["TEST"]["NAME"] = (
                "/dev/shm/" + db_test + ".test.db.sqlite3"
            )


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


INTERNAL_IPS = [
    "127.0.0.1",
]

AUTH_USER_MODEL = 'accounts.CustomUser'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'accounts.backends.EmailOrUsernameModelBackend',
]


JWT_CONF = {
    'TOKEN_LIFETIME_HOURS': 24,
    'REFRESH_TOKEN_LIFETIME_HOURS': 192,
    'TOKEN_PREFIX': 'Bearer',
}


CELERY_BROKER_URL = os.environ.get("CELERY_BROKER", default="redis://redis:6379/1")
CELERY_RESULT_BACKEND = os.environ.get("CELERY_BACKEND", default="redis://redis:6379/2")
CELERY_ACCEPT_CONTENT = ('json', )
CHUNK_SIZE = 5
CELERY_LOG_INDEX_PREFIX = 'task'
# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
MAX_TIMEOUT_IN_SECONDS = 60


CELERY_BEAT_SCHEDULE = {
    'podcast-parse-task': {
        'task': 'parser.tasks.podcast_parse_task',
        'schedule': crontab(hour=23, minute=30), # ~3:00 AM Tehran
        # 'schedule': crontab(minute="*/10"),
    },
}


ELASTICSEARCH_HOSTS = ['http://elastic:9200']


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'celery': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter':'verbose',
        },

        # 'elasticsearch': {
        #     'class': 'core.handlers.ElasticsearchHandler',
        #     'hosts': ELASTICSEARCH_HOSTS,
        #     'index_name': 'django-requests',
        # },
    },
    "formatters":{
        'verbose':{
            'format': "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            'style': '{',
        },
    },
    'loggers': {
        'celery-log': {
            'handlers': ['celery'],
            'level': 'INFO',
            'propagate': True,
        },

        # 'django.request': {
        #     'handlers': ['elasticsearch'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },

    },
}

LOG_INDEX_PREFIX = "api"


CORS_ORIGIN_ALLOW_ALL = True


ELASTICSEARCH_DSL = {
    'default': {
        'hosts': 'http://elastic:9200/'
    },
}


GEOIP_PATH = os.path.join(BASE_DIR, 'geoip/')
